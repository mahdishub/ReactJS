{"version":3,"sources":["index.js"],"names":["Square","props","id","className","onClick","value","findWinner","squares","check","player","win_pos","i","length","j","Board","index","this","grid","row","idx","push","renderSquare","React","Component","Game","state","history","Array","fill","moves","cell","stepNo","nextplayer","slice","current","Math","floor","col","setState","concat","moves_idx","document","getElementById","focus","map","square","choice","move","jumpTo","status","winner","handleClick","ReactDOM","render"],"mappings":"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","file":"static/js/main.c6845f14.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css' \r\nfunction Square (props) {\r\n  return (\r\n    <button id={props.id} className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  )\r\n}\r\n\r\nfunction findWinner(squares) {\r\n  // console.log(squares)\r\n  const win_pos = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ]\r\n  let check,player\r\n  for ( let i = 0; i < win_pos.length; i++ ) {\r\n    check = 0\r\n    player = squares[win_pos[i][0]]\r\n    if ( player === null ) continue\r\n    for ( let j = 0; j < 3; j++ ) {\r\n      if ( squares[win_pos[i][j]] === player ) check++\r\n    }\r\n    if (check===3) break;\r\n  }\r\n  return (check===3)\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n\r\n\r\n\r\n  renderSquare(i) {\r\n    const index = `square${i}`\r\n    return (\r\n      <Square key={i} id={index} value={this.props.squares[i]} onClick={()=>this.props.onClick(i)}/>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const div = '<div className=\"board-row\">'\r\n    let grid = []\r\n    for ( let i = 0; i < 3; i++ ) {\r\n      let row = []\r\n      let idx\r\n      for ( let j = 0; j < 3; j++ ) {\r\n        idx = i*3+j\r\n        row.push(this.renderSquare(idx))\r\n      }\r\n      grid.push(<div key={i} className=\"board-row\">{row}</div>)\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {grid}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      history: [\r\n        {squares: Array(9).fill(null)}\r\n      ],\r\n      moves: [\r\n        {cell: Array(2).fill(null)}\r\n      ],\r\n      stepNo: 0,\r\n      nextplayer: 'X'\r\n    }\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0,this.state.stepNo+1)\r\n    const current = history[history.length-1];\r\n    if ( findWinner(current.squares) || current.squares[i] ) return\r\n    // console.log(i)\r\n    const squares = current.squares.slice()\r\n    squares[i] = this.state.nextplayer\r\n    const nextplayer = (this.state.nextplayer==='X') ? 'Y':'X'\r\n    // this.state.history.push({squares:squares})\r\n    // console.log('HIstory',this.state.history)\r\n    const row = Math.floor(i/3)\r\n    const col = i%3;\r\n    const moves = this.state.moves.slice(0,this.state.stepNo+1)\r\n    const cell = [row,col]\r\n    this.setState({\r\n      history: history.concat({squares:squares}),\r\n      moves: moves.concat({cell: cell}),\r\n      stepNo: this.state.stepNo+1,\r\n      nextplayer: nextplayer\r\n    })\r\n  }\r\n\r\n  jumpTo(index) {\r\n    \r\n    // exercise 2\r\n    if ( index !== 0 ) {\r\n      const moves_idx = this.state.moves[index].cell[0]*3 + this.state.moves[index].cell[1]\r\n      const id = `square${moves_idx}`\r\n      document.getElementById(id).focus()\r\n    }\r\n    \r\n    \r\n    this.setState({\r\n      stepNo: index,\r\n      nextplayer: (index%2 === 0) ? 'X':'Y'\r\n    })\r\n  }\r\n  \r\n  render() {\r\n\r\n    const current = this.state.history[this.state.stepNo];\r\n    const squares = current.squares\r\n    // console.log('Game',squares)\r\n\r\n    const moves = this.state.history.map((square,index)=> {\r\n      const choice = index ? `Go to #${index}`: 'Go to start'\r\n      let move = null\r\n      if ( index !== 0 ) {\r\n        move = '|| ' + this.state.moves[index].cell[0] + ' ' + this.state.moves[index].cell[1]\r\n      }\r\n      return(\r\n        <li key={index}>\r\n          <button onClick={()=>this.jumpTo(index)}>{choice} {move}</button>\r\n        </li>\r\n      )\r\n    })\r\n\r\n    let status = null,winner = null\r\n    if ( findWinner(squares) === true ) {\r\n      winner = (this.state.nextplayer==='X') ? 'Y':'X'\r\n      status = `Winner is: ${winner}`\r\n    }\r\n    else {\r\n      status = `Next player: ${this.state.nextplayer}`\r\n    }\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board squares={squares} onClick={(i)=>this.handleClick(i)}/>\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div className=\"status\">{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}